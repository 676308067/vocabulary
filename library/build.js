const fs = require('fs-extra')
const path = require('path')
const chalk = require('chalk')
const childProcess = require('child_process')

const variables = require('./variables')

const componentsRegistry = require('./components.json')

const families = ['utils', 'elements', 'layouts', 'patterns', 'templates']

console.log(chalk.blue.inverse('● Bundling CC Vocabulary\n'))

clearDir(variables.distDir)

indexComponents()

buildLibrary(variables.destDir)

putMetafiles(variables.destDir)

console.log(chalk.green.inverse('\n✔ Done.'))

// Top level functions

function clearDir (directory) {
  process.stdout.write(chalk.yellow(
    'Clearing folder',
    chalk.bold(directory),
    '... '
  ))
  fs.emptyDirSync(directory)
  process.stdout.write(chalk.green('done\n'))
}

function indexComponents () {
  const fileContent = index()
  process.stdout.write(chalk.yellow(
    'Writing library exports to',
    chalk.bold(variables.srcIndexPath),
    '... '
  ))
  fs.writeFileSync(variables.srcIndexPath, fileContent)
  process.stdout.write(chalk.green('done\n'))
}

function buildLibrary (directory) {
  process.stdout.write(chalk.yellow(
    'Building library',
    chalk.bold(variables.verboseName),
    'to',
    chalk.bold(directory),
    '... '
  ))
  build(
    variables.srcIndexPath,
    directory
  )
  process.stdout.write(chalk.green('done\n'))
}

function putMetafiles (directory) {
  process.stdout.write(chalk.yellow(
    'Adding metafiles to',
    chalk.bold(directory),
    '... '
  ))

  let files

  files = [
    'README.md',
    'LICENSE',
    'package.json',
    'root.css'
  ]
  put(files, variables.metafilesDir, directory)

  files = [
    'colors.styl',
    'font-reset.styl',
    'list.styl',
    'media.styl',
    'page.styl',
    'sizes.styl'
  ]
  put(files, variables.stylesDir, directory)

  files = [
    'tokens.raw.json',
    'tokens.scss',
    'tokens.styl'
  ]
  put(files, variables.tokensDir, directory)

  process.stdout.write(chalk.green('done\n'))
}

// Helper functions

function index () {
  process.stdout.write(chalk.yellow(
    'Forming content for index at',
    chalk.bold(variables.srcIndexPath),
    '... '
  ))

  const imports = families.map(
    family => componentsRegistry[family].map(
      component => {
        let directory = component
        let name = component
        if (name instanceof Array) {
          directory = component[0]
          name = name.join('')
        }
        return `import ${name} from './${family}/${directory}/${name}'`
      }
    ).join('\n')
  ).join('\n\n')

  const components = families.map(
    family => componentsRegistry[family].map(
      component => {
        let name = component
        if (name instanceof Array) {
          name = name.join('')
        }
        return `  ${name}`
      }
    ).join(',\n')
  ).join(',\n\n')

  const registrations = families.map(
    family => componentsRegistry[family].map(
      component => {
        let name = component
        if (name instanceof Array) {
          name = name.join('')
        }
        return `    Vue.component('${name}', ${name})`
      }
    ).join('\n')
  ).join('\n\n')
  process.stdout.write(chalk.green('done\n'))

  return `\
/**
 * Fragile magic. Do not touch.
 *
 * Just kidding, this file is autogenerated and changes will be overwritten on
 * the next build. To make changes, edit [library/build.js].
 */

${imports}

// Export individual components
export {
${components}
}

// Export as plugin
export default {
  install: function (Vue) {
${registrations}
  }
}
`
}

function build (source, dest) {
  dest = `--dest ${dest}`
  const cmd = `vue-cli-service build --target lib --name vocabulary ${source} ${dest}`
  childProcess.execSync(cmd, { stdio: 'ignore' })
}

function put (files, source, destination) {
  files.forEach(file => {
    fs.copySync(
      path.resolve(source, file),
      path.resolve(destination, file)
    )
  })
}
