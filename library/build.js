const fs = require('fs-extra')
const path = require('path')
const chalk = require('chalk')
const childProcess = require('child_process')

const variables = require('./variables')

const componentsRegistry = require('./components.json')

console.log(chalk.blue.inverse('● Bundling CC Vocabulary\n'))

clearDir(variables.distDir)

indexComponents()

buildLibrary(variables.destDir)

putMetafiles(variables.destDir)

console.log(chalk.green.inverse('\n✔ Done.'))

// Helper functions

function index () {
  process.stdout.write(chalk.yellow(
    'Forming content for index at',
    chalk.bold(variables.srcIndexPath),
    '... '
  ))
  const elementImports = componentsRegistry.elements.map(
    element => `import ${element} from './elements/${element}/${element}'`
  ).join('\n')
  const patternImports = componentsRegistry.patterns.map(
    pattern => `import ${pattern} from './patterns/${pattern}/${pattern}'`
  ).join('\n')

  const elements = '  ' + componentsRegistry.elements.join(',\n  ')
  const patterns = '  ' + componentsRegistry.patterns.join(',\n  ')

  const elementComponents = componentsRegistry.elements.map(
    element => `    Vue.component('${element}', ${element})`
  ).join('\n')
  const patternComponents = componentsRegistry.patterns.map(
    pattern => `    Vue.component('${pattern}', ${pattern})`
  ).join('\n')
  process.stdout.write(chalk.green('done\n'))

  return `\
/**
 * Fragile magic. Do not touch.
 *
 * Just kidding, this file is autogenerated and changes will be overwritten.
 * To update, run [npm run library:index].
 * To make changes, edit [library/write_index.js].
 */

${elementImports}

${patternImports}

// Export individual components
export {
${elements},
${patterns}
}

// Export as plugin
export default {
  install: function (Vue) {
${elementComponents}
${patternComponents}
  }
}
`
}

function build (source, dest) {
  dest = `--dest ${dest}`
  const cmd = `vue-cli-service build --target lib --name vocabulary ${source} ${dest}`
  childProcess.execSync(cmd, { stdio: 'ignore' })
}

function putMetafiles (directory) {
  process.stdout.write(chalk.yellow(
    'Adding metafiles to',
    chalk.bold(directory),
    '... '
  ))
  const files = [
    'README.md',
    'LICENSE',
    'package.json',
    'demo.html',
    'root.css'
  ]
  files.forEach(file => {
    fs.copySync(
      path.resolve(variables.metafilesDir, file),
      path.resolve(directory, file)
    )
  })
  process.stdout.write(chalk.green('done\n'))
}

// Top level functions

function clearDir (directory) {
  process.stdout.write(chalk.yellow(
    'Clearing folder',
    chalk.bold(directory),
    '... '
  ))
  fs.emptyDirSync(directory)
  process.stdout.write(chalk.green('done\n'))
}

function indexComponents () {
  const fileContent = index()
  process.stdout.write(chalk.yellow(
    'Writing library exports to',
    chalk.bold(variables.srcIndexPath),
    '... '
  ))
  fs.writeFileSync(variables.srcIndexPath, fileContent)
  process.stdout.write(chalk.green('done\n'))
}

function buildLibrary (directory) {
  process.stdout.write(chalk.yellow(
    'Building library',
    chalk.bold(variables.verboseName),
    'to',
    chalk.bold(directory),
    '... '
  ))
  build(
    variables.srcIndexPath,
    directory
  )
  process.stdout.write(chalk.green('done\n'))
}
